{"name": "GET an existing booking from GET all bookingid's", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <Response [404]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n.venv\\Lib\\site-packages\\requests\\models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000001AD99BE9DC0>, s = 'Not Found', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\ncreate_token = '88f8854ffb1f288'\n\n    @allure.title(\"GET an existing booking from GET all bookingid's\")\n    @allure.description(\"TC#3 GET an existing booking from GET all bookingid's , \"\n                        \"Update a booking with that id, Verify with GET request that it is updated\")\n    @pytest.mark.integration\n    \n    def test_get_update_verify_all_bookings_id(create_token):\n        base_url = \"https://restful-booker.herokuapp.com/booking/\"\n    \n    \n        #Step 1- Get all bookings\n    \n        get_url = base_url\n        response = requests.get(url=get_url)\n        assert response.status_code == 200\n        all_bookings = response.json()\n    \n        #Ensure list is not empty\n        assert len(all_bookings) != 0\n        #print(all_bookings)\n    \n        #Get 1st booking Id\n        bookingid = all_bookings[0][\"bookingid\"]\n        print(\"First booking ID is:\", bookingid)\n        #return booking_id\n    \n        # Step 2- Update 1st booking\n        update_url = base_url + str(bookingid)\n        cookie = \"token=\" + create_token\n        headers= {\n            \"Content-Type\": \"application/json\",\n            \"Cookie\": cookie\n        }\n        update_payload = {\n            \"firstname\": \"NewFirstName\",\n            \"lastname\": \"NewLastName\",\n            \"bookingdates\": {\n                \"checkin\": \"2018-02-10\",\n                \"checkout\": \"2019-02-15\"\n            }\n        }\n        update_response = requests.patch(url=update_url, headers=headers, json=update_payload)\n        assert update_response .status_code == 200\n    \n        # Step 3- Verify the update\n        get_update_response = requests.get(url=update_url)\n>       update_data = get_update_response.json()\n\nex02_July\\Exercise 26072024\\Integration\\test_integration_TC3.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [404]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n.venv\\Lib\\site-packages\\requests\\models.py:978: JSONDecodeError"}, "description": "TC#3 GET an existing booking from GET all bookingid's , Update a booking with that id, Verify with GET request that it is updated", "start": 1723030889499, "stop": 1723030900438, "uuid": "336be989-4e25-4d52-821a-bdd6992f37ed", "historyId": "485bc7403e732cc6929e6d36f4fda3f7", "testCaseId": "485bc7403e732cc6929e6d36f4fda3f7", "fullName": "ex02_July.Exercise 26072024.Integration.test_integration_TC3#test_get_update_verify_all_bookings_id", "labels": [{"name": "tag", "value": "integration"}, {"name": "parentSuite", "value": "ex02_July.Exercise 26072024.Integration"}, {"name": "suite", "value": "test_integration_TC3"}, {"name": "host", "value": "DESKTOP-DR477QI"}, {"name": "thread", "value": "7836-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "ex02_July.Exercise 26072024.Integration.test_integration_TC3"}]}